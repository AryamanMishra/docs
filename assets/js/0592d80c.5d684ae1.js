"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9360],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(a),k=r,u=d["".concat(p,".").concat(k)]||d[k]||c[k]||i;return a?n.createElement(u,l(l({ref:t},m),{},{components:a})):n.createElement(u,l({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8986:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const i={title:"1.1.0",sidebar_position:1},l="1.1.0 - 2023-08-23",o={unversionedId:"releases/1_1_0",id:"releases/1_1_0",title:"1.1.0",description:"Added",source:"@site/docs/releases/1_1_0.md",sourceDirName:"releases",slug:"/releases/1_1_0",permalink:"/docs/releases/1_1_0",draft:!1,editUrl:"https://github.com/OpenLineage/docs/tree/main/docs/releases/1_1_0.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"1.1.0",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"SQL parser",permalink:"/docs/development/sql"},next:{title:"1.0.0",permalink:"/docs/releases/1_0_0"}},p={},s=[{value:"Added",id:"added",level:3},{value:"Fixed",id:"fixed",level:3}],m={toc:s};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"110---2023-08-23"},"1.1.0 - 2023-08-23"),(0,r.kt)("h3",{id:"added"},"Added"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Flink: create Openlineage configuration based on Flink configuration")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2033"},(0,r.kt)("inlineCode",{parentName:"a"},"#2033"))," @pawel-big-lebowski",(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Flink configuration entries starting with `openlineage."),"` are passed to the Openlineage client.*"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Java: add Javadocs to the Java client")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2004"},(0,r.kt)("inlineCode",{parentName:"a"},"#2004"))," @julienledem",(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"The client was missing some Javadocs.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: append output dataset name to a job name")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2036"},(0,r.kt)("inlineCode",{parentName:"a"},"#2036"))," @pawel-big-lebowski",(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Solves the problem of multiple jobs writing to different datasets while having the same job name. The feature is enabled by default and results in different job names. It can be disabled by setting ",(0,r.kt)("inlineCode",{parentName:"em"},"spark.openlineage.jobName.appendDatasetName")," to ",(0,r.kt)("inlineCode",{parentName:"em"},"false"),"."),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Unifies job names generated on the Databricks platform (using a dot job part separator instead of an underscore). The default behaviour can be altered with ",(0,r.kt)("inlineCode",{parentName:"em"},"spark.openlineage.jobName.replaceDotWithUnderscore"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: support Spark 3.4.1")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2057"},(0,r.kt)("inlineCode",{parentName:"a"},"#2057"))," @pawel-big-lebowski",(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Bumps the latest Spark version to be covered in integration tests."))),(0,r.kt)("h3",{id:"fixed"},"Fixed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Airflow: do not use database as fallback when no schema parsed")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2023"},(0,r.kt)("inlineCode",{parentName:"a"},"#2023"))," @mobuchowski",(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Sets the schema to ",(0,r.kt)("inlineCode",{parentName:"em"},"None")," in ",(0,r.kt)("inlineCode",{parentName:"em"},"TablesHierarchy")," to skip filtering on the schema level in the information schema query.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Flink: fix a bug when getting schema for ",(0,r.kt)("inlineCode",{parentName:"strong"},"KafkaSink"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2042"},(0,r.kt)("inlineCode",{parentName:"a"},"#2042"))," @pentium3",(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Fixes the incomplete schema from ",(0,r.kt)("inlineCode",{parentName:"em"},"KafkaSinkVisitor")," by changing the ",(0,r.kt)("inlineCode",{parentName:"em"},"KafkaSinkWrapper")," to catch schemas of type ",(0,r.kt)("inlineCode",{parentName:"em"},"AvroSerializationSchema"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: filter ",(0,r.kt)("inlineCode",{parentName:"strong"},"CreateView")," events")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/1968"},(0,r.kt)("inlineCode",{parentName:"a"},"#1968")),(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/1987"},(0,r.kt)("inlineCode",{parentName:"a"},"#1987"))," @pawel-big-lebowski",(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Clears events generated by logical plans having ",(0,r.kt)("inlineCode",{parentName:"em"},"CreateView")," nodes as root.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: fix ",(0,r.kt)("inlineCode",{parentName:"strong"},"MERGE INTO")," for delta tables identified by physical locations")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2026"},(0,r.kt)("inlineCode",{parentName:"a"},"#2026"))," @pawel-big-lebowski",(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Delta tables identified by physical locations were not properly recognized.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: fix incorrect naming of JDBC datasets")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2035"},(0,r.kt)("inlineCode",{parentName:"a"},"#2035"))," @mobuchowski",(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Makes the namespace generated by the JDBC/Spark connector conform to the naming schema in the spec."),"  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: fix ignored event ",(0,r.kt)("inlineCode",{parentName:"strong"},"adaptive_spark_plan")," in Databricks")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2061"},(0,r.kt)("inlineCode",{parentName:"a"},"#2061"))," @algorithmy1",(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Removes ",(0,r.kt)("inlineCode",{parentName:"em"},"adaptive_spark_plan")," from the ",(0,r.kt)("inlineCode",{parentName:"em"},"excludedNodes")," in ",(0,r.kt)("inlineCode",{parentName:"em"},"DatabricksEventFilter"),"."))))}c.isMDXComponent=!0}}]);