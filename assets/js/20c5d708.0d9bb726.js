"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[350],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=l(a),m=r,h=d["".concat(p,".").concat(m)]||d[m]||c[m]||i;return a?n.createElement(h,s(s({ref:t},u),{},{components:a})):n.createElement(h,s({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2943:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:1},s="Object Model",o={unversionedId:"spec/object-model",id:"spec/object-model",title:"Object Model",description:"This page has not yet been written! You're welcome to contribute using the Edit link at the bottom.",source:"@site/docs/spec/object-model.md",sourceDirName:"spec",slug:"/spec/object-model",permalink:"/docs/spec/object-model",draft:!1,editUrl:"https://github.com/OpenLineage/docs/tree/main/docs/spec/object-model.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Naming Conventions",permalink:"/docs/spec/naming"}},p={},l=[{value:"Run State Update",id:"run-state-update",level:2},{value:"Run",id:"run",level:2},{value:"Run Facet",id:"run-facet",level:3},{value:"Job",id:"job",level:2},{value:"Job Facet",id:"job-facet",level:3},{value:"Dataset",id:"dataset",level:2},{value:"Dataset Facet",id:"dataset-facet",level:3},{value:"Input Dataset Facets",id:"input-dataset-facets",level:4},{value:"Output Dataset Facets",id:"output-dataset-facets",level:4}],u={toc:l};function c(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"object-model"},"Object Model"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This page has not yet been written! You're welcome to contribute using the Edit link at the bottom.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"OpenLineage Object Model",src:a(7369).Z,width:"587",height:"386"})),(0,r.kt)("h2",{id:"run-state-update"},"Run State Update"),(0,r.kt)("p",null,"Run states define the ",(0,r.kt)("a",{parentName:"p",href:"/docs/spec/run-cycle"},"lifecycle")," of the current run. Usually, the state starts with ",(0,r.kt)("inlineCode",{parentName:"p"},"START")," and ends with ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLETE"),". Also, any state will also have timestamp of when this particular state happened."),(0,r.kt)("h2",{id:"run"},"Run"),(0,r.kt)("p",null,"Specifies ",(0,r.kt)("inlineCode",{parentName:"p"},"instance")," of a particular running ",(0,r.kt)("em",{parentName:"p"},"job"),". Every run will have a uniquely identifiable ",(0,r.kt)("inlineCode",{parentName:"p"},"run ID")," that is usually in ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Universally_unique_identifier"},"UUID")," format, that can later be tracked."),(0,r.kt)("h3",{id:"run-facet"},"Run Facet"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"nominalTime"),": Captures the time this run is scheduled for. This is a typical usage for time based scheduled job. The job has a nominal schedule time that will be different from the actual time it is running at.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"parent"),": Captures the parent job and Run when the run was spawn from a parent run. For example in the case of ",(0,r.kt)("a",{parentName:"p",href:"https://airflow.apache.org/"},"Airflow"),", there's a run for the DAG that then spawns runs for individual tasks that would refer to the parent run as the DAG run. Similarly when a SparkOperator starts a Spark job, this creates a separate run that refers to the task run as its parent.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"errorMessage"),": Captures potential error message, programming language - and optionally stack trace - with which the run failed."))),(0,r.kt)("h2",{id:"job"},"Job"),(0,r.kt)("p",null,"An abstract ",(0,r.kt)("inlineCode",{parentName:"p"},"process")," that consumes, executes, and produces datasets (defined as its inputs and outputs). It is identified by a ",(0,r.kt)("inlineCode",{parentName:"p"},"unique name")," within a ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace"),". The ",(0,r.kt)("em",{parentName:"p"},"Job")," evolves over time and this change is captured during the job runs. "),(0,r.kt)("h3",{id:"job-facet"},"Job Facet"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"sourceCodeLocation"),": Captures the source code location and version (example: git sha) of the job.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"sourceCode"),": Captures language (ex. python) and actual source code of the job. Using this source code, users can gain details of what the job does.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"sql"),": Captures the SQL query if this job runs a SQL query."))),(0,r.kt)("h2",{id:"dataset"},"Dataset"),(0,r.kt)("p",null,"an abstract representation of data. It has a ",(0,r.kt)("inlineCode",{parentName:"p"},"unique name")," within the ",(0,r.kt)("inlineCode",{parentName:"p"},"datasource namespace")," derived from its physical location (for example, db.host.database.schema.table). Typically, a ",(0,r.kt)("em",{parentName:"p"},"Dataset")," changes when a job writing to it completes. Similarly to the ",(0,r.kt)("em",{parentName:"p"},"Job")," and ",(0,r.kt)("em",{parentName:"p"},"Run")," distinction, metadata that is more static from run to run is captured in a DatasetFacet (for example, the schema that does not change every run), what changes every ",(0,r.kt)("em",{parentName:"p"},"Run")," is captured as an ",(0,r.kt)("em",{parentName:"p"},"InputFacet")," or an ",(0,r.kt)("em",{parentName:"p"},"OutputFacet")," (for example, what subset of the data set was read or written, like a time partition)."),(0,r.kt)("h3",{id:"dataset-facet"},"Dataset Facet"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"schema"),": Captures the schema of the dataset")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"dataSource"),": Captures the Database instance containing this datasets (ex: Database schema. Object store bucket, ...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"lifecycleStateChange"),": Captures the lifecycle states of the dataset like: alter, create, drop, overwrite, rename, truncate.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"version"),": Captures the dataset version when versioning is defined by database (ex. Iceberg snapshot ID)"))),(0,r.kt)("h4",{id:"input-dataset-facets"},"Input Dataset Facets"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"dataQualityMetrics"),": Captures dataset level and column level data quality metrics when scanning a dataset whith a DataQuality library (row count, byte size, null count, distinct count, average, min, max, quantiles).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"dataQualityAssertions"),": Captures the result of running data tests on dataset or its columns."))),(0,r.kt)("h4",{id:"output-dataset-facets"},"Output Dataset Facets"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"outputStatistics"),": Captures the size of the output written to a dataset (row count and byte size).")))}c.isMDXComponent=!0},7369:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/object-model-6533a9f8050f1d25bea01c1cb9a59bd1.svg"}}]);