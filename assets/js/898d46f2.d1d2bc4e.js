"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1012],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(a),m=r,h=c["".concat(p,".").concat(m)]||c[m]||u[m]||i;return a?n.createElement(h,o(o({ref:t},d),{},{components:a})):n.createElement(h,o({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},7873:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var n=a(7462),r=(a(7294),a(3905)),i=a(4174);const o={title:"Getting Started",template:"basepage",hide_table_of_contents:!0,description:"Data lineage is the foundation for a new generation of powerful, context-aware data tools and best practices. OpenLineage enables consistent collection of lineage metadata, creating a deeper understanding of how data is produced and used."},l=void 0,p={type:"mdx",permalink:"/getting-started/",source:"@site/src/pages/getting-started/index.mdx",title:"Getting Started",description:"Data lineage is the foundation for a new generation of powerful, context-aware data tools and best practices. OpenLineage enables consistent collection of lineage metadata, creating a deeper understanding of how data is produced and used.",frontMatter:{title:"Getting Started",template:"basepage",hide_table_of_contents:!0,description:"Data lineage is the foundation for a new generation of powerful, context-aware data tools and best practices. OpenLineage enables consistent collection of lineage metadata, creating a deeper understanding of how data is produced and used."}},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Run Marquez with Docker",id:"run-marquez-with-docker",level:3},{value:"Collect Run-Level Metadata",id:"collect-run-level-metadata",level:2},{value:"Step 1: Start a Run",id:"step-1-start-a-run",level:3},{value:"REQUEST",id:"request",level:4},{value:"RESPONSE",id:"response",level:4},{value:"Step 2: Complete a Run",id:"step-2-complete-a-run",level:3},{value:"REQUEST",id:"request-1",level:4},{value:"RESPONSE",id:"response-1",level:4},{value:"View Collected Lineage Metadata",id:"view-collected-lineage-metadata",level:2},{value:"Search Job Metadata",id:"search-job-metadata",level:3},{value:"View Job Metadata",id:"view-job-metadata",level:3},{value:"View Input Dataset Metadata",id:"view-input-dataset-metadata",level:3},{value:"Summary",id:"summary",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Feedback",id:"feedback",level:2}],d={toc:s};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{id:"post-content"},(0,r.kt)("div",{className:"title px-4 py-12 text-center lg:py-14 lg:px-0"},(0,r.kt)("h2",{className:"text-5xl text-color-1"},"Getting Started")),(0,r.kt)("p",null,"This guide covers how you can quickly get started collecting ",(0,r.kt)("em",{parentName:"p"},"dataset"),", ",(0,r.kt)("em",{parentName:"p"},"job"),", and ",(0,r.kt)("em",{parentName:"p"},"run")," metadata using OpenLineage. We'll show how to collect ",(0,r.kt)("em",{parentName:"p"},"run-level")," metadata as OpenLineage events using ",(0,r.kt)("a",{parentName:"p",href:"https://marquezproject.ai"},"Marquez")," as the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage#scope"},"HTTP backend"),", then explore lineage metadata via the Marquez UI."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Before you begin, make sure you have installed:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.docker.com/install"},"Docker 17.05"),"+"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.docker.com/compose/install"},"Docker Compose"))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"In this guide, we'll be using Marquez as the OpenLineage HTTP backend and running the HTTP server via Docker.")),(0,r.kt)("h3",{id:"run-marquez-with-docker"},"Run Marquez with ",(0,r.kt)("a",{parentName:"h3",href:"https://github.com/MarquezProject/marquez/blob/main/Dockerfile"},"Docker")),(0,r.kt)("p",null,"The easiest way to get up and running with Marquez is Docker. Check out the Marquez source code and run the ",(0,r.kt)("inlineCode",{parentName:"p"},"./docker/up.sh")," script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ git clone git@github.com:MarquezProject/marquez.git && cd marquez\n\n$ ./docker/up.sh\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"--build")," flag to the script to build images from source, or ",(0,r.kt)("inlineCode",{parentName:"p"},"--tag X.Y.Z")," to use a tagged image.")),(0,r.kt)("p",null,"To view the Marquez UI and verify it's running, open ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3000"},"http://localhost:3000"),". The UI enables you to discover dependencies between jobs and the datasets they produce and consume via the lineage graph, view run-level metadata of current and previous job runs, and much more."),(0,r.kt)("h2",{id:"collect-run-level-metadata"},"Collect Run-Level Metadata"),(0,r.kt)("p",null,"Marquez is an ",(0,r.kt)("a",{parentName:"p",href:"https://lfaidata.foundation"},"LF AI & DATA")," incubation project to collect, aggregate, and visualize a data ecosystem\u2019s metadata. Marquez is the reference implementation of the OpenLineage standard."),(0,r.kt)("p",null,"In this example, we show how you can collect dataset and job metadata using ",(0,r.kt)("a",{parentName:"p",href:"https://marquezproject.github.io/marquez/"},"Marquez"),", Using the ",(0,r.kt)("a",{parentName:"p",href:"https://marquezproject.github.io/marquez/openapi.html#tag/Lineage"},"LineageAPI"),"."),(0,r.kt)("p",null,"When you submit a lineage event, you first need to define an unique ",(0,r.kt)("inlineCode",{parentName:"p"},"run ID")," that would look something like ",(0,r.kt)("inlineCode",{parentName:"p"},"d46e465b-d358-4d32-83d4-df660ff614dd"),". This is usually in UUID format, and should be unique. This run ID will enable the tracking of run-level metadata over time for a ",(0,r.kt)("em",{parentName:"p"},"job")," which may have a name, like ",(0,r.kt)("inlineCode",{parentName:"p"},"my-job"),". So, let's get started!"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The example shows how to collect metadata via direct HTTP API calls using ",(0,r.kt)("inlineCode",{parentName:"p"},"curl"),". But, you can also get started using our client library for ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/MarquezProject/marquez/tree/main/clients/java"},"Java")," or ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/MarquezProject/marquez/tree/main/clients/python"},"Python"),".")),(0,r.kt)("h3",{id:"step-1-start-a-run"},"Step 1: Start a Run"),(0,r.kt)("p",null,"Use the run ID ",(0,r.kt)("inlineCode",{parentName:"p"},"d46e465b-d358-4d32-83d4-df660ff614dd")," to ",(0,r.kt)("strong",{parentName:"p"},"start")," the run for ",(0,r.kt)("inlineCode",{parentName:"p"},"my-job")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"my-input")," as the input dataset:"),(0,r.kt)("h4",{id:"request"},"REQUEST"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ curl -X POST http://localhost:5000/api/v1/lineage \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{\n        "eventType": "START",\n        "eventTime": "2020-12-28T19:52:00.001+10:00",\n        "run": {\n          "runId": "d46e465b-d358-4d32-83d4-df660ff614dd"\n        },\n        "job": {\n          "namespace": "my-namespace",\n          "name": "my-job"\n        },\n        "inputs": [{\n          "namespace": "my-namespace",\n          "name": "my-input"\n        }],  \n        "producer": "https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client"\n      }\'\n')),(0,r.kt)("h4",{id:"response"},"RESPONSE"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"201 CREATED")),(0,r.kt)("h3",{id:"step-2-complete-a-run"},"Step 2: Complete a Run"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"d46e465b-d358-4d32-83d4-df660ff614dd")," to ",(0,r.kt)("strong",{parentName:"p"},"complete")," the run for ",(0,r.kt)("inlineCode",{parentName:"p"},"my-job")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"my-output")," as the output dataset. We also specify the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.md#dataset-facets"},"schema")," ",(0,r.kt)("strong",{parentName:"p"},"facet")," to collect the schema for ",(0,r.kt)("inlineCode",{parentName:"p"},"my-output")," before marking the run as completed. Note, you don't have to specify the input dataset ",(0,r.kt)("inlineCode",{parentName:"p"},"my-input")," again for the run since it already has been associated with the run ID:"),(0,r.kt)("h4",{id:"request-1"},"REQUEST"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ curl -X POST http://localhost:5000/api/v1/lineage \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{\n        "eventType": "COMPLETE",\n        "eventTime": "2020-12-28T20:52:00.001+10:00",\n        "run": {\n          "runId": "d46e465b-d358-4d32-83d4-df660ff614dd"\n        },\n        "job": {\n          "namespace": "my-namespace",\n          "name": "my-job"\n        },\n        "outputs": [{\n          "namespace": "my-namespace",\n          "name": "my-output",\n          "facets": {\n            "schema": {\n              "_producer": "https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client",\n              "_schemaURL": "https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/spec/OpenLineage.json#/definitions/SchemaDatasetFacet",\n              "fields": [\n                { "name": "a", "type": "VARCHAR"},\n                { "name": "b", "type": "VARCHAR"}\n              ]\n            }\n          }\n        }],     \n        "producer": "https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client"\n      }\'\n')),(0,r.kt)("h4",{id:"response-1"},"RESPONSE"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"201 CREATED")),(0,r.kt)("h2",{id:"view-collected-lineage-metadata"},"View Collected Lineage Metadata"),(0,r.kt)("h3",{id:"search-job-metadata"},"Search Job Metadata"),(0,r.kt)("p",null,"To view lineage metadata collected by Marquez, browse to the UI by visiting ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3000"},"http://localhost:3000"),". Then, use the search bar in the upper right-side of the page and search for the job ",(0,r.kt)("inlineCode",{parentName:"p"},"my-job"),". To view lineage metadata for ",(0,r.kt)("inlineCode",{parentName:"p"},"my-job"),", click on the job from the drop-down list:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image",src:a(8091).Z,width:"1180",height:"718"})),(0,r.kt)("h3",{id:"view-job-metadata"},"View Job Metadata"),(0,r.kt)("p",null,"You should see the job ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"my-input")," as an input dataset and ",(0,r.kt)("inlineCode",{parentName:"p"},"my-output")," as an output dataset in the lineage graph and the job run marked as ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLETED "),": "),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image",src:a(2568).Z,width:"2180",height:"1178"})),(0,r.kt)("h3",{id:"view-input-dataset-metadata"},"View Input Dataset Metadata"),(0,r.kt)("p",null,"Finally, click on the output dataset ",(0,r.kt)("inlineCode",{parentName:"p"},"my-output")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"my-job"),". You should see the dataset ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"schema"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"description"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image",src:a(5839).Z,width:"2182",height:"1156"})),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"In this simple example, we showed you how to use Marquez to collect dataset and job metadata with Openlineage. We also walked you through the set of HTTP ",(0,r.kt)("a",{parentName:"p",href:"https://marquezproject.github.io/marquez/openapi.html"},"API")," calls to successfully mark a run as ",(0,r.kt)("strong",{parentName:"p"},"complete")," and view the lineage metadata collected with Marquez."),(0,r.kt)("h2",{id:"next-steps"},"Next Steps"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Take a look at Marquez's Airflow ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/MarquezProject/marquez/tree/main/examples/airflow"},"example")," to learn how to enable OpenLineage metadata collection for Airflow DAGs and troubleshoot failing DAGs using Marquez."),(0,r.kt)("li",{parentName:"ul"},"Listen to ",(0,r.kt)("a",{parentName:"li",href:"https://www.dataengineeringpodcast.com/marquez-data-lineage-episode-111"},"Solving Data Lineage Tracking And Data Discovery At WeWork"),"."),(0,r.kt)("li",{parentName:"ul"},"Listen to ",(0,r.kt)("a",{parentName:"li",href:"https://www.dataengineeringpodcast.com/openlineage-data-lineage-specification-episode-187"},"Unlocking The Power of Data Lineage In Your Platform with OpenLineage"),".")),(0,r.kt)("h2",{id:"feedback"},"Feedback"),(0,r.kt)("p",null,"What did you think of this guide? We would love to hear feedback, and we can be found on the ",(0,r.kt)("a",{parentName:"p",href:"http://bit.ly/OpenLineageSlack"},"OpenLineage Slack"),"."),(0,r.kt)("br",null),(0,r.kt)("br",null)),(0,r.kt)(i.Z,{mdxType:"Footer"}))}u.isMDXComponent=!0},4174:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),r=a(2263);function i(){const{siteConfig:e}=(0,r.Z)(),t=e.customFields.links.map(((e,t)=>n.createElement(o,{data:e,key:`footer-n-l-${t}`}))),a=e.customFields.linksSocial.map(((e,t)=>n.createElement(o,{data:e,key:`footer-n-l-${t}`})));return n.createElement("footer",{className:"footer bg-bgalt py-12"},n.createElement("div",{className:"container mx-auto text-center"},n.createElement("div",{className:"flex justify-center my-3 mb-4"},n.createElement("a",{href:"/",title:e?.title},n.createElement("img",{src:"/"+e.themeConfig.navbar.logo.src,alt:`${e.themeConfig.navbar.logo.alt} - logo`,style:{height:"45px"}}))),n.createElement("div",{className:"text-color-2 my-3 footer-links animated-link-parent"},n.createElement("ul",null,t)),n.createElement("div",{className:"text-color-2 my-3 footer-links animated-link-parent"},n.createElement("ul",null,a)),n.createElement("p",{className:"text-color-default text-lg"},"Copyright \xa9 ",(new Date).getFullYear()," The Linux Foundation\xae. All rights reserved.")))}const o=e=>{let{data:t}=e;return n.createElement("li",{className:"inline-block mx-3 animated-link-parent"},n.createElement("a",{href:t.to?t.to:t.href,title:t.label},n.createElement("span",null,t.label)))}},8091:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/marquez-search-view-job-209b7e9b69daa47e5185846b3ee6f75a.png"},5839:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/marquez-tab-view-dataset-output-6923ea42dbf12414356a65db4b0f6d59.png"},2568:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/marquez-tab-view-job-completed-d48aca52315d7ebf79fe76063ab7fe80.png"}}]);