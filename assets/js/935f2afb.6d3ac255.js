"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"About OpenLineage","href":"/docs/","docId":"index"},{"type":"link","label":"Getting Started","href":"/docs/getting-started","docId":"getting-started"},{"type":"category","label":"Core Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Object Model","href":"/docs/spec/object-model","docId":"spec/object-model"},{"type":"link","label":"Naming Conventions","href":"/docs/spec/naming","docId":"spec/naming"},{"type":"link","label":"The Run Cycle","href":"/docs/spec/run-cycle","docId":"spec/run-cycle"},{"type":"category","label":"Facets & Extensibility","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Column Level Lineage Facet","href":"/docs/spec/facets/column_lineage_facet","docId":"spec/facets/column_lineage_facet"}],"href":"/docs/spec/facets/"},{"type":"link","label":"Producers","href":"/docs/spec/producers","docId":"spec/producers"},{"type":"link","label":"Working with Schemas","href":"/docs/spec/schemas","docId":"spec/schemas"}]},{"type":"category","label":"Client Libraries","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Java","href":"/docs/client/java","docId":"client/java"},{"type":"link","label":"Python","href":"/docs/client/python","docId":"client/python"}]},{"type":"category","label":"Integrations","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Integrating With OpenLineage","href":"/docs/integrations/about","docId":"integrations/about"},{"type":"category","label":"Apache Spark","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Quickstart with Jupyter","href":"/docs/integrations/spark/quickstart_local","docId":"integrations/spark/quickstart_local"},{"type":"link","label":"Quickstart with Databricks","href":"/docs/integrations/spark/quickstart_databricks","docId":"integrations/spark/quickstart_databricks"},{"type":"link","label":"Column Level Lineage","href":"/docs/integrations/spark/spark_column_lineage","docId":"integrations/spark/spark_column_lineage"}],"href":"/docs/integrations/spark/"},{"type":"category","label":"Apache Airflow","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Manually annotated lineage","href":"/docs/integrations/airflow/manual","docId":"integrations/airflow/manual"},{"type":"link","label":"Using OpenLineage with older versions of Airflow","href":"/docs/integrations/airflow/older","docId":"integrations/airflow/older"}],"href":"/docs/integrations/airflow/"},{"type":"link","label":"Apache Flink","href":"/docs/integrations/flink","docId":"integrations/flink"},{"type":"link","label":"Writing our own integration","href":"/docs/integrations/libraries","docId":"integrations/libraries"},{"type":"link","label":"dbt","href":"/docs/integrations/dbt","docId":"integrations/dbt"},{"type":"link","label":"SQL parser","href":"/docs/integrations/sql","docId":"integrations/sql"},{"type":"link","label":"Great Expectations","href":"/docs/integrations/great-expectations","docId":"integrations/great-expectations"}]},{"type":"link","label":"Example Lineage Events","href":"/docs/examples","docId":"examples"},{"type":"link","label":"Frequently Asked Questions","href":"/docs/faq","docId":"faq"},{"type":"category","label":"Guides","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"About These Guides","href":"/docs/guides/about","docId":"guides/about"},{"type":"link","label":"Using OpenLineage with Spark","href":"/docs/guides/spark","docId":"guides/spark"},{"type":"link","label":"Backfilling Airflow DAGs Using Marquez","href":"/docs/guides/airflow","docId":"guides/airflow"},{"type":"link","label":"Using Marquez with dbt","href":"/docs/guides/dbt","docId":"guides/dbt"}]}]},"docs":{"client/java":{"id":"client/java","title":"Java","description":"This page has not yet been written! You\'re welcome to contribute using the Edit link at the bottom.","sidebar":"tutorialSidebar"},"client/python":{"id":"client/python","title":"Python","description":"Overview","sidebar":"tutorialSidebar"},"examples":{"id":"examples","title":"Example Lineage Events","description":"This page needs your contribution! Please contribute new examples using the edit link at the bottom.","sidebar":"tutorialSidebar"},"faq":{"id":"faq","title":"Frequently Asked Questions","description":"This page needs your contribution! Please contribute new questions (or answers) using the edit link at the bottom.","sidebar":"tutorialSidebar"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"This page is in need of some refactoring. Suggestions are welcome using the Edit link at the bottom.","sidebar":"tutorialSidebar"},"guides/about":{"id":"guides/about","title":"About These Guides","description":"The following tutorials take you through the process of exploiting the lineage metadata provided by Marquez and OpenLineage to solve common data engineering problems and make new analytical and historical insights into your pipelines.","sidebar":"tutorialSidebar"},"guides/airflow":{"id":"guides/airflow","title":"Backfilling Airflow DAGs Using Marquez","description":"Adapted from a blog post by Willy Lulciuc","sidebar":"tutorialSidebar"},"guides/dbt":{"id":"guides/dbt","title":"Using Marquez with dbt","description":"Adapted from a blog post by Ross Turk","sidebar":"tutorialSidebar"},"guides/spark":{"id":"guides/spark","title":"Using OpenLineage with Spark","description":"Adapted from a blog post by Michael Collado","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"About OpenLineage","description":"This page has not yet been written! You\'re welcome to contribute using the Edit link at the bottom.","sidebar":"tutorialSidebar"},"integrations/about":{"id":"integrations/about","title":"Integrating With OpenLineage","description":"This page has not yet been written! You\'re welcome to contribute using the Edit link at the bottom.","sidebar":"tutorialSidebar"},"integrations/airflow/airflow":{"id":"integrations/airflow/airflow","title":"Apache Airflow","description":"Airflow is a widely-used workflow automation and scheduling platform that can be used to author and manage data pipelines. Airflow uses workflows made of directed acyclic graphs (DAGs) of tasks. To learn more about Airflow, check out the Airflow documentation.","sidebar":"tutorialSidebar"},"integrations/airflow/manual":{"id":"integrations/airflow/manual","title":"Manually annotated lineage","description":"This feature is only supported with Airflow versions greater than 2.1.0)","sidebar":"tutorialSidebar"},"integrations/airflow/older":{"id":"integrations/airflow/older","title":"Using OpenLineage with older versions of Airflow","description":"For Airflow 2.3+ OpenLineage integration automatically registers itself. Nothing else is required besides specifying where OpenLineage events should end up. However, some additional configuration is required for older OpenLineage versions.","sidebar":"tutorialSidebar"},"integrations/dbt":{"id":"integrations/dbt","title":"dbt","description":"dbt (data build tool) is a powerful transformation engine. It operates on data already within a warehouse, making it easy for data engineers to build complex pipelines from the comfort of their laptops. While it doesn\u2019t perform extraction and loading of data, it\u2019s extremely powerful at transformations.","sidebar":"tutorialSidebar"},"integrations/flink":{"id":"integrations/flink","title":"Apache Flink","description":"This integration is considered experimental: only specific workflows and use cases are supported.","sidebar":"tutorialSidebar"},"integrations/great-expectations":{"id":"integrations/great-expectations","title":"Great Expectations","description":"This page has not yet been written! You\'re welcome to contribute using the Edit link at the bottom.","sidebar":"tutorialSidebar"},"integrations/libraries":{"id":"integrations/libraries","title":"Writing our own integration","description":"As there are hundreds and possibly thousands databases, query engines and other tools you could use to process, create and move data, there\'s great chance that existing OpenLineage integration won\'t cover your needs.","sidebar":"tutorialSidebar"},"integrations/spark/quickstart_databricks":{"id":"integrations/spark/quickstart_databricks","title":"Quickstart with Databricks","description":"Open Lineage\'s can be installed on Databricks leveraging init scripts. Please note, Databricks on Google Cloud does not currently support the DBFS CLI so the proposed solution will not work for Google Cloud until that feature is enabled.","sidebar":"tutorialSidebar"},"integrations/spark/quickstart_local":{"id":"integrations/spark/quickstart_local","title":"Quickstart with Jupyter","description":"Trying out the Spark integration is super easy if you already have Docker Desktop and git installed.","sidebar":"tutorialSidebar"},"integrations/spark/spark":{"id":"integrations/spark/spark","title":"Apache Spark","description":"Spark jobs typically run on clusters of machines. A single machine hosts the \\"driver\\" application,","sidebar":"tutorialSidebar"},"integrations/spark/spark_column_lineage":{"id":"integrations/spark/spark_column_lineage","title":"Column Level Lineage","description":"Column level lineage for Spark is turned on by default and requires no additional work to be done. The following documentation describes its internals.","sidebar":"tutorialSidebar"},"integrations/sql":{"id":"integrations/sql","title":"SQL parser","description":"SQL is the most widely used data processing language and for a lot of use cases, getting lineage from SQL-based tasks is solving majority of the problem.","sidebar":"tutorialSidebar"},"spec/facets/column_lineage_facet":{"id":"spec/facets/column_lineage_facet","title":"Column Level Lineage Facet","description":"Column level lineage provides fine grained information on datasets\' dependencies. Not only we know the dependency exist, but we are also able to understand which input columns are used to produce output columns. This allows answering questions like Which root input columns are used to construct column x?","sidebar":"tutorialSidebar"},"spec/facets/facets":{"id":"spec/facets/facets","title":"Facets & Extensibility","description":"This page has not yet been written! You\'re welcome to contribute using the Edit link at the bottom.","sidebar":"tutorialSidebar"},"spec/naming":{"id":"spec/naming","title":"Naming Conventions","description":"This page has some initial content but is not yet complete. Contribute are welcome via the Edit link below.","sidebar":"tutorialSidebar"},"spec/object-model":{"id":"spec/object-model","title":"Object Model","description":"This page has not yet been written! You\'re welcome to contribute using the Edit link at the bottom.","sidebar":"tutorialSidebar"},"spec/producers":{"id":"spec/producers","title":"Producers","description":"This page has not yet been written! You\'re welcome to contribute using the Edit link at the bottom.","sidebar":"tutorialSidebar"},"spec/run-cycle":{"id":"spec/run-cycle","title":"The Run Cycle","description":"This page has not yet been written! You\'re welcome to contribute using the Edit link at the bottom.","sidebar":"tutorialSidebar"},"spec/schemas":{"id":"spec/schemas","title":"Working with Schemas","description":"This page has not yet been written! You\'re welcome to contribute using the Edit link at the bottom.","sidebar":"tutorialSidebar"}}}')}}]);