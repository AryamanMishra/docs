"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2597],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=p(r),d=n,m=f["".concat(l,".").concat(d)]||f[d]||u[d]||o;return r?a.createElement(m,i(i({ref:t},c),{},{components:r})):a.createElement(m,i({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},8237:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_position:2},i="Lineage in custom operators",s={unversionedId:"integrations/airflow/operator",id:"integrations/airflow/operator",title:"Lineage in custom operators",description:"As a way of extending the OpenLineage Airflow integration, we are providing a way to add custom extractors.",source:"@site/docs/integrations/airflow/operator.md",sourceDirName:"integrations/airflow",slug:"/integrations/airflow/operator",permalink:"/docs/integrations/airflow/operator",draft:!1,editUrl:"https://github.com/OpenLineage/docs/tree/main/docs/integrations/airflow/operator.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Custom extractors",permalink:"/docs/integrations/airflow/extractor"},next:{title:"Manually annotated lineage",permalink:"/docs/integrations/airflow/manual"}},l={},p=[],c={toc:p};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"lineage-in-custom-operators"},"Lineage in custom operators"),(0,n.kt)("p",null,"As a way of extending the OpenLineage Airflow integration, we are providing a way to ",(0,n.kt)("a",{parentName:"p",href:"/docs/integrations/airflow/extractor"},"add custom extractors"),".\nThis is great for people who want to add integration with external operators - for example, a regular Airflow user who wants to support, for example, ",(0,n.kt)("inlineCode",{parentName:"p"},"GCSToS3Operator"),"."),(0,n.kt)("p",null,"However, it's too cumbersome for people who own operators, and want to add the default implementation of OpenLineage for their operators for external users.\nThis is why we have an additional way to expose lineage: the ",(0,n.kt)("inlineCode",{parentName:"p"},"get_openlineage_facets_on_start")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"get_openlineage_facets_on_complete")," methods that can be implemented on your Operator.",(0,n.kt)("br",null),"When any of those are present, OpenLineage's ",(0,n.kt)("inlineCode",{parentName:"p"},"DefaultExtractor")," uses them to get lineage data. If you don't define ",(0,n.kt)("inlineCode",{parentName:"p"},"get_openlineage_facets_on_complete")," it will run ",(0,n.kt)("inlineCode",{parentName:"p"},"get_openlineage_facets_on_start")," instead."),(0,n.kt)("p",null,"For example, let's assume you want to expose lineage from an operator that copies data from one table to another:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class YourCopyTableOperator(BaseOperator):\n    def __init__(\n        source_table: str,\n        target_table: str,\n        database: str\n        **kwargs\n    ):\n        super().__init__(**kwargs)\n        self.source_table = source_table\n        self.target_table = target_table\n        self.database = database \n      \n    def execute(self, context) -> Any:\n        ...  # your implementation\n\n    def get_openlineage_facets_on_start(self) -> OperatorLineage:\n        return OperatorLineage(\n            inputs=[Dataset(namespace=self.database, name=self.source_table)],\n            outputs=[Dataset(namespace=self.database, name=self.target_table)],\n            run_facets={},\n            job_facets={}\n        )\n")),(0,n.kt)("p",null,"Both methods should return ",(0,n.kt)("inlineCode",{parentName:"p"},"OperatorLineage")," structure:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"@attr.s\nclass OperatorLineage:\n    inputs: List[Dataset] = attr.ib(factory=list)\n    outputs: List[Dataset] = attr.ib(factory=list)\n    run_facets: Dict[str, BaseFacet] = attr.ib(factory=dict)\n    job_facets: Dict[str, BaseFacet] = attr.ib(factory=dict)\n")),(0,n.kt)("p",null,"similar to ",(0,n.kt)("inlineCode",{parentName:"p"},"TaskMetadata")," described in ",(0,n.kt)("a",{parentName:"p",href:"/docs/integrations/airflow/extractor#interface"},"Custom extractors"),"."))}u.isMDXComponent=!0}}]);